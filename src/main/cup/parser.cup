package org.example;

import org.example.expression.*;
import org.example.operator.*;
import org.example.instruction.*;


class Parser;

/* Terminals */
terminal PLUS, MINUS, TIMES, DIVIDE, UMINUS, LPAREN, RPAREN;
terminal Integer NUMBER;
terminal String STRING;

terminal PRINT; // instruction

/* Non Terminals */
non terminal Expr expr;
non terminal Expr num_expr;
non terminal Expr str_expr;

non terminal Operator num_op;

non terminal Instruction output_inst;

/* Precedence */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left UMINUS;


/* Grammar */
num_expr ::=
    NUMBER:e
        {: RESULT = new IntExpression(e.intValue()); :} |
    expr:e1 num_op:o expr:e2
        {: RESULT = new OperatorExpression(e1, o, e2); :}
;

expr ::=
    num_expr:e
        {: RESULT = e; :} |
    str_expr:e
        {: RESULT = e; :}
;

num_op ::=
    PLUS
        {: RESULT = new PlusOperator(); :} |
    MINUS
        {: RESULT = new MinusOperator(); :} |
    TIMES
        {: RESULT = new TimesOperator(); :}} |
    DIVIDE
        {: RESULT = new DivideOperator(); :}}
;

str_expr ::=
    STRING:s
        {: RESULT = new StringExpression(s.substring(1, s.length()-1)); :}
;

output_inst ::=
    PRINT LPAREN expr:e RPAREN
        {: RESULT = new OutputInstruction(e); :}
;