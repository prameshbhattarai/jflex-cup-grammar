package org.example;

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;

import org.example.expression.*;
import org.example.operator.*;
import org.example.instruction.*;

parser code {:

    public ParserInternal(Lexer lex, ComplexSymbolFactory sf) {
        super(lex, sf);
    }

    public void report_error(String message, Object info) {
        StringBuilder sb = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol symbol) {

            if (symbol.left >= 0) {
                sb.append(" in line ").append(symbol.left+1);
            }

            if (symbol.right >= 0) {
               sb.append(", column ").append(symbol.right+1);
            }
        }
        sb.append(" : ").append(message);
        System.err.println(sb);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/* Terminals */
terminal PLUS, MINUS, TIMES, DIVIDE, MODULO, ASSIGN;
terminal LPAREN, RPAREN, SEMI, LBRACE, RBRACE;
terminal Integer NUMBER;
terminal String IDENT;
terminal String STRING;

terminal PRINT, MAIN_FUNCTION, LENGTH; // instruction

/* Non Terminals */
non terminal Expr expr;
non terminal Expr num_expr;
non terminal Expr str_expr;

non terminal Program program;

non terminal Operator num_op;
non terminal ConcatOperator str_op;

non terminal InstructionList inst_list;
non terminal Instruction inst;
non terminal Instruction assign_inst;
non terminal PrintInstruction print_inst;

/* Precedence */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULO;

/* Start Program */
start with program;

/* Grammar */
expr ::=
    IDENT:i
        {: RESULT = new IDExpression(i); :} |
    num_expr:e
        {: RESULT = e; :} |
    str_expr:e
        {: RESULT = e; :}
;

num_expr ::=
    NUMBER:e
        {: RESULT = new IntExpression(e.intValue()); :} |
    MINUS NUMBER:e
        {: RESULT = new NegativeIntExpression(e.intValue()); :} |
    expr:e1 num_op:o expr:e2
        {: RESULT = new OperatorExpression(e1, o, e2); :}
;

str_expr ::=
    STRING:s
        {: RESULT = new StringExpression(s.substring(1, s.length()-1)); :} |
    LENGTH LPAREN expr:e RPAREN
        {: RESULT = new StringLengthExpression(e); :} |
    STRING:s1 PLUS STRING:s2
        {: RESULT = new StringConcatExpression(s1.substring(1, s1.length()-1), s2.substring(1, s2.length()-1)); :}
;

num_op ::=
    PLUS
        {: RESULT = new PlusOperator(); :} |
    MINUS
        {: RESULT = new MinusOperator(); :} |
    TIMES
        {: RESULT = new TimesOperator(); :} |
    DIVIDE
        {: RESULT = new DivideOperator(); :} |
    MODULO
        {: RESULT = new ModuloOperator(); :}
;

inst_list ::=
    inst_list:il inst:i
        {: il.add(i); RESULT = il; :} |
    inst:i
        {: RESULT = new InstructionList(i); :}
;

inst ::=
    print_inst:pi SEMI
        {: RESULT = pi; :} |
    assign_inst:ai SEMI
        {: RESULT = ai; :}
;

print_inst ::=
    PRINT LPAREN expr:e RPAREN
        {: RESULT = new PrintInstruction(e); :}
;

assign_inst ::=
    IDENT:i ASSIGN expr:e
        {: RESULT = new AssignmentInstruction(i, e); :}
;

program ::=
    MAIN_FUNCTION LPAREN RPAREN LBRACE inst_list:i
        {: Program program = new Program(i); program.exec(); :}
    RBRACE
;